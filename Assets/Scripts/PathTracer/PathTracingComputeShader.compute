#pragma kernel CSMain

// RNG
float2 _Pixel;
float _Seed;
float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

// Basic Path tracing
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
float2 _PixelOffset;

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float specular;
    float smoothness;
    float3 emission;
    float refractionIndex;
};

Sphere TestSphere()
{
    Sphere sphere;

    sphere.position = float3(1.0f,25.0f,1.0f);
    sphere.radius = 10.0f;
    sphere.albedo = float3(1.0f,1.0f,1.0f);
    sphere.specular = 1.0f;
    sphere.smoothness = 1.0f;
    sphere.emission = float3(0.0f,0.0f,0.0f);
    sphere.refractionIndex = 1.333f;

    return sphere;
}

Sphere TestSphere2()
{
    Sphere sphere;

    sphere.position = float3(1.0f,25.0f,1.0f);
    sphere.radius = 5.0f;
    sphere.albedo = float3(1.0f,1.0f,1.0f);
    sphere.specular = 1.0f;
    sphere.smoothness = 1.0f;
    sphere.emission = float3(0.0f,0.0f,0.0f);
    sphere.refractionIndex = 1.333f;

    return sphere;
}

// Primitives
StructuredBuffer<Sphere> _Spheres;

// Light
float4 _DirectionalLight;

SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;
static const float MaxDistance = 9999999999999999999999999.0f;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float specular;
    float smoothness;
    float3 emission;
    bool inside;
    float refractionIndex;
};

RayHit CreateRayHit()
{
    RayHit hit;
    
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = MaxDistance;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 1.0f, 0.0f);
    hit.specular = 0.0f;
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 1.0f, 0.0f);

    hit.inside = false;
    hit.refractionIndex = 0.0f;
    
    return hit;
}

void IntersectPlane(Ray ray, inout RayHit bestHit, float3 n, float3 pO)
{
    float denom = dot(n, ray.direction);
    if (denom > 0.0000001f)
    {
        float3 pOrO = pO - ray.origin;
        float t = dot(pOrO, n) / denom;

        if (t > 0 && t < bestHit.distance)
        {
            bestHit.distance = t;
            bestHit.position = ray.origin + t * ray.direction;
            bestHit.normal = -1.0f * n;
            bestHit.albedo = float3(.1f, .1f, .1f);
            bestHit.specular = 0.3f;
            bestHit.smoothness = 1.0f;
            bestHit.emission = float3(0.0f, 0.0f, 0.0f);
        }
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2;

    bool inside = t < 0;

    if (inside)
        t = p1 + p2;

    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.smoothness = sphere.smoothness;
        bestHit.emission = sphere.emission;
        
        bestHit.inside = inside;
        bestHit.refractionIndex = sphere.refractionIndex;

    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    
    IntersectPlane(ray, bestHit, float3(0, -1, 0), float3(0, -4, 0));

    Sphere sphere = TestSphere();
    IntersectSphere(ray, bestHit, sphere);

    Sphere sphere2 = TestSphere2();
    IntersectSphere(ray, bestHit, sphere2);
	
    // Trace spheres
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++)
        IntersectSphere(ray, bestHit, _Spheres[i]);
    
    return bestHit;
}

float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 biNormal = normalize(cross(normal, tangent));
    return float3x3(tangent, biNormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha)
{
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cos_theta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sin_theta = sqrt(1.0f - cos_theta * cos_theta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);
    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

float3 Refract(float3 normal, float3 direction, float refractIndex)
{
    return 0.0f;
}

float SmoothnessToPhongAlpha(float s)
{
    return pow(1000.0f, s * s);
}

// TODO: Reduce branching with math and smart coding
float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < MaxDistance)
    {
        // Calculate chances of diffuse and specular reflection
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);        
        float sum = specChance + diffChance;
        specChance /= sum;
        diffChance /= sum;
        
        // Roulette-select the ray's path: This so the specular surface is not 100% reflective
        float roulette = rand();
        if (hit.refractionIndex > 0.0f)
        {
            float3 n = hit.normal;
            float n1 = 1.0f;
            float n2 = hit.refractionIndex;

            if(hit.inside)
            {
                float temp = n1;
                n1 = n2;
                n2 = temp;

                n = -1.0f * n;
            }

            float cos_theta_i = clamp(-1.0f, 1.0f, dot(n, -1.0f * ray.direction));
            float n1_n2 = n1 / n2;
            float sin_theta_t = n1_n2 * sqrt(max(0.0f, 1 - cos_theta_i * cos_theta_i));

            float refractRatio = 1.0f;
            if(sin_theta_t < 1.0f)
            {
                float cos_theta_t = sqrt(max( 0.0f, 1.0f - sin_theta_t * sin_theta_t ) );
                cos_theta_i = abs( cos_theta_i );

                float Rs = ( ( n2 * cos_theta_i ) - ( n1 * cos_theta_t ) ) / ( ( n2 * cos_theta_i ) + ( n1 * cos_theta_t ) );
                float Rp = ( ( n1 * cos_theta_i ) - ( n2 * cos_theta_t ) ) / ( ( n1 * cos_theta_i ) + ( n2 * cos_theta_t ) );
                refractRatio = ( Rs * Rs + Rp * Rp ) * 0.5f;
            }


            // Chance is [0, 1] -> If refractChance > 1 we always reflect
            float refractChance = rand();
            if(refractChance > refractRatio)
            {
                // Refract
            
                // Calculate k
                float k = 1 - (n1_n2 * n1_n2) * (1 - (cos_theta_i * cos_theta_i));
                if(k < 0)
                {
                    ray.direction = 0.0f;
                    ray.energy = 0.0f;
                    return float3(0.0f, 0.0f, 0.0f);
                }
                else
                {
                    ray.direction = n1_n2 * ray.direction + n * (n1_n2 * cos_theta_i - sqrt(k));
                    ray.origin = hit.position + ray.direction * 0.001f;
                    ray.energy *= hit.albedo;
                    return hit.emission;
                }

                ray.energy = 0.0f;
                return float3(0.0f, abs(refractRatio - 1.0f), 0.0f);
            }
            else
            {
                // Reflect

                // Specular reflection
                float alpha = SmoothnessToPhongAlpha(hit.smoothness);
                ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
                float f = (alpha + 2) / (alpha + 1);
                ray.energy *= (1.0f / specChance) * hit.specular * hit.albedo * sdot(hit.normal, ray.direction, f);
            }
        }
        else if (roulette < specChance)
        {
            // Specular reflection
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
        }
        else
        { 
            // Diffuse reflection
            ray.direction = SampleHemisphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / diffChance) * hit.albedo;
        }
        
        ray.origin = hit.position + ray.direction * 0.001f;
        return hit.emission;
    }
    else
    {
        // Hit sky

        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
        
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.2;
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    _Pixel = id.xy;
    
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    
    // Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
            break;
    }

    Result[id.xy] = float4(result, 1);
}